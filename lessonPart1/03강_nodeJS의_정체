요약 :
< 태초에 HTML이 있었다.
< 개발자들이 HTML을 동작하게 해줄라고 JavaScript를 HTML에 붙여줬다.
< 자바스크립트는 누가 해석하는가? 
< 브라우저가 한다.
< 구글에서 V8이라는 크롬브라우저 엔진을 만들었는데 (자바스크립트를 빠르게 해석하는 엔진) 
< 성능이 너무 좋았다. 그래서 
< 이놈들이 V8에 살을 좀 더 붙여서 nodeJS를 출시했다. 크롬브라우저 V8엔진 => nodejs
< nodejs는 브라우저 내에서 말고도 다른 환경에서도 자바스크립트를 실행할 수 있게 도와준다.
< nodejs로 서버도 만들 수 있다. 
< nodejs로 서버를 만들땐 Non-blocking 방식으로 만듬.
< Non-blocking 방식은 또 머지? 
< 다음강에 알려줌


Node.js의 정체를 알아보자



태초에 HTML이라는 언어가 있었습니다.


HTML은 별거 아니고 그저 웹페이지를 만들 때 사용하는 언어입니다. 

태초의 HTML은 이미지만 보여주고 글 보여주고 가 끝이었다. 매우 정적이었다.

<p>안녕하세요</p>
이렇게 생겼고 웹페이지에 글, 그림, 버튼 이런걸 넣을 때 사용합니다. 




그리고 HTML과 함께 사용하던 JavaScript라는 언어가 있었습니다.


JavaScript는 별거 아니고 그저 웹페이지를 움직이게 만들 때 사용하는 언어입니다. 

document.getElementById('hello').innerHTML = '안녕';

대충 

이렇게 생겼고 "HTML을" 마음대로 "조작"해서 내용을 바꾸고, 클릭하면 움직이게 만들고 이런게 가능합니다.

그래서 자바스크립트를 사용하면 로그인 모달창, 애니메이션 메뉴 이런 것들을 만들 수 있었죠.

그래서 정적이었던(동작이 없었던) HTML을 다이나믹하게 움직일 수 있도록 만들수 있게 되었다.


정리하자면 :
< 태초에 HTML이 있었다.
< 개발자들이 정적인 HTML을 동적으로 만들어주기 시작 JavaScript를 붙였다.


그런데 갑자기 질문 : 

Q. 그러면 자바스크립트는 누가 해석을 하나요?
A. 웹 브라우저가 합니다. 웹 브라우저를 설치하면 자동으로 설치가 되요.



JavaScript 구동 엔진인 V8의 등장


크롬, 파이어폭스, 익스플로러 이런 브라우저들이 자바스크립트를 읽고 해석하는 역할을 합니다.

자바스크립트를 빠르게 읽고 해석하면 웹사이트 렌더링 성능도 빨라지니

브라우저 개발자들은 자바스크립트를 해석할 수 있는 엔진 개발에 열성이었습니다. 

지금 생각해보니 확실히 초기 웹은 속도가 느렸다.

이미지라도 많은 사이트에 들어가서 문서를 볼려면 시간이 한참동안 있어야 하거나

접속자라도 많은 경우 보기 너무 힘들었음.

그러다가 구글 사내에 있던 '크롬 브라우저 개발자'들이 문제를 일으킵니다.

자바스크립트 해석엔진인 V8이라는 프로그램을 만들었는데 성능이 너무나도 뛰어난 나머지

V8을 자랑하려고 이것만 똑 떼어서 살을 붙여 출시하게 됩니다. 

그리고 Node.js라고 이름을 짓습니다. 




Node.js 를 한줄 요약하자면


자바스크립트를 브라우저 말고도 로컬 PC에서도 실행시켜줄 수 있는 실행창(런타임)입니다.

Node.js를 실행하면 그냥 자바스크립트 입력란이 하나가 뿅 뜨고요

거기다가 자바스크립트 입력하면 바로바로 해석해서 실행시켜줍니다. 

그게 Node.js의 끝입니다. 


근데 Node.js의 매력에 빠진 개발자들이 Node.js로 많은 프로그램들을 만들어내기 시작했습니다. 

Node.js 덕분에 하찮은 역할만 하던 자바스크립트를 일반 프로그래밍 언어처럼 다룰 수 있게 된겁니다. 

하지만 Node.js로 왜 웹서버를 만들기 시작했는지는 다음 시간에 알아보도록 합시다. 


개발자들이 Node.js를 쓰기 시작한 이유 :

서버 개발이 쉽다.

Non-blocking / IO 특징