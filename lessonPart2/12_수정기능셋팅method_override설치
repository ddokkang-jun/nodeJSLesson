글 수정 기능 1 : /edit 페이지 안내와 method-override





0:00 이번건 쉬울 수 있으니 혼자 만들어보라는 잔소리

1:40 write.ejs와 비슷한 레이아웃의 edit.ejs만들고 /edit 접속시 보여주기

4:30 /edit/2로 접속하면 2번게시물 수정화면 보여주기

12:57 edit.ejs 페이지에서 서버에게 PUT 수정요청 날리는 법






edit.ejs 페이지를 만들어보도록 합시다.  



수정기능을 구현할 수 있는 방법은 여러가지인데, 가장 쉬운 방법이 바로 edit 페이지를 따로 만드는 것입니다. 

뭐 다르게 하시려면 write 페이지를 그대로 쓰는데 전송시 'post'가 아니라 '수정'요청으로 바꾸는 경우도 있을 수 있겠군요. 

우리는 그냥 구분이 쉽게 edit.ejs 페이지를 만들어보도록 합시다. 



(views/edit.ejs)

안에 들어갈 내용은 그냥 write.ejs에 있던 모든 코드 복붙
그냥 파일 새로 만드시고 write.ejs에 있던 코드 전부 복붙하시면 되겠습니다.




다만 새로운 점은 input태그에 value속성을 집어넣어야한다는 것입니다.

(views/edit.ejs)

<input type="text" value="111111">

안에 들어갈 내용은 그냥 write.ejs에 있던 모든 코드 복붙
input 태그에 이렇게 value 속성을 집어넣으시면 input태그에 미리 채워진 값을 설정할 수 있습니다.

위 코드는 111111이라는 값을 input에 미리 채워준 코드입니다. 

이 자리에 원래있던 제목이나 날짜데이터를 넣어주면 수정하기 편하겠죠?

그건 나중에 생각하도록 합시다. 







누군가 /edit으로 접속하면 방금 만든 edit.ejs 로 안내해야합니다. 



이런 코드 작성은 이제 눈감고도 할 수 있을 것 같습니다. 

눈감고 하세요. 

(server.js)

app.get('/edit', function(요청, 응답){
  응답.render('edit.ejs')
});

이제 /edit 으로 접속하면 edit.ejs 파일을 보내고 렌더링해줍니다.

끝입니다. 그런데 생각해보니 게시물마다 각각 다른 edit 페이지가 구성되어야 합니다. 

2번게시물과 4번게시물 edit 페이지는 각각 페이지 안의 내용이 달라야하지않겠습니까. 

그래서 경로를 이렇게 수정해보도록 합시다. 





/edit/2로 접속하면 2번게시물 수정화면이 보여야합니다.   



그럼 코드를 고치면 되겠네요 뭐 

(server.js)

app.get('/edit/:id', function(요청, 응답){
  응답.render('edit.ejs', {DB에 있던 :id번 게시물의 제목과 날짜})
});

1. 일단 경로를 /edit/:id로 고쳤습니다. 그러면 누군가 /edit/뒤에 아무 문자나 적어도 edit.ejs 페이지를 보내주게 됩니다. 

왜 그랬냐고요? 안그러면 /edit/2, /edit/3, /edit/4 이런 여러가지 페이지들을 만들어내야하잖아요.

(발행했던 글이 100개면 코드가 100줄이 되겠군요)



2. 그리고 누군가 /edit/2로 접속하면 DB에 있던 2번게시물의 제목과 날짜를 ejs파일로 보내야합니다. 

그래야 아까 <input>에 value속성으로 제목을 채워넣을 수 있으니까요.

그럼 여기서 문제 들어갑니다.






Q. DB에 있던 (URL에 적힌 :id)번 게시물의 제목과 날짜를 꺼내오려면 어떤 코드를 작성해야할까여?


알아서 해보십시오.

정 안되면 밑을 봅시다.






(server.js)

app.get('/edit/:id', function(요청, 응답){
  db.collection('post').findOne({ _id : (URL에 적힌:id) }, function(에러, 결과){
    응답.render('edit.ejs', { post : 결과 })
  })
  
});

1. findOne함수를 이용해서 DB에 저장되어있던 _id가 URL에 적힌 :id인 게시물을 찾습니다.

2. 그리고 그 찾은 결과를 post라는 이름으로 edit.ejs에 보내도록 코드를 짰습니다. 

3. 그냥 대충 복붙했을 까봐 한글로 적은 함정이 하나 있습니다. URL에 적힌 :id라는걸 자바스크립트로 어떻게 표현하면 될까요?



- 저번시간에 한것이지만 그것은 요청.params.id 라고 쓰시면 되겠습니다. 

이런거 까먹으면 언제나 구글찬스를 사용가능합니다. 까먹어서 기억에 없는건 열심히 생각한다고 나오지 않습니다.




(server.js)

app.get('/edit/:id', function(요청, 응답){
  db.collection('post').findOne({ _id : parseInt(요청.params.id) }, function(에러, 결과){
    응답.render('edit.ejs', { post : 결과 })
  })
});

그래서 edit페이지 안내하는 최종코드입니다. (parseInt는 정수로 변환해주는 고마운 함수입니다.)

이제 어떤 사람이 /edit/4로 접속하면 {_id : 4}인 게시물을 찾고, 그 결과를 edit.ejs에 보내주게됩니다.





그럼 edit.ejs에서 input안에 기존 게시물의 제목과 날짜를 채워주려면?

(edit.ejs)

<div class="container" style="margin-top: 30px;">
      <h4>수정페이지입니다.</h4>
      <!-- 서버에 /add 로 post 요청을 날림 -->
      <form action="/edit" method="POST">
        <div class="form-group">
          <label>오늘의 할일</label>
          <input type="text" value="<%= post.title %>" class="form-control" name="title">
        </div>
        <div class="form-group" style="margin-bottom: 30px;">
          <label>날짜</label>
          <input type="text" class="form-control" name="date" placeholder="날짜: 2023/5/5">
        </div>
        <button type="submit" class="btn btn-outline-secondary">수정하기</button>
      </form> 
    </div>

HTML내에 변수를 꽂아넣는 <%= 어쩌구 %>EJS 문법을 쓰면 됩니다.

<input type="text" value="<%= post.title %>" class="form-control" name="title">







이제 edit.ejs에서 전송버튼을 누르면 수정(PUT)요청을 해야합니다. 


서버에 요청할 수 있는 방법은 4가지라고 배웠습니다. GET POST PUT DELETE

4개 중에 수정할 땐 PUT요청을 쓰면 좋다고 배웠습니다.

그럼 폼태그를 이렇게 수정하면 되지않을까 생각해보면 되는데..

(edit.ejs)

<form action="/어쩌구" method="PUT">
  <input 어쩌구>
</form>

그쵸? method란을 POST가 아니라 PUT으로 바꾸면 될 것 같은데

그건 되지 않습니다. form태그 내에선 POST, GET 이 두가지 방식만 지원합니다.

해결책은.. DELETE 강의 처럼 AJAX를 쓰던가.. 아니면

PUT을 기어코 여기에 쓰려면 method-override라는 라이브러리를 설치하면 됩니다. 



1. 터미널에 

npm install method-override

를 입력해서 설치하시면 됩니다.



2. 설치를 완료하기 위해 server.js 상단에 다음 코드를 추가합니다. 

const methodOverride = require('method-override')
app.use(methodOverride('_method'))

const와 app.use가 모여있는 곳에 복붙하시면 됩니다.


3. 이제 form 태그에 PUT요청을 사용할 수 있습니다. 

(edit.ejs)

<form action="/add?_method=PUT" method="POST">
  <input 어쩌구>
</form>
이렇게 URL란과 method란을 수정해주면

폼 전송시 /add 경로로 PUT요청을 해줍니다.

PUT요청 해결! 

이제 PUT 요청을 받으면 DB 게시물을 수정해주는 서버코드 짜는 일만 남았습니다. 